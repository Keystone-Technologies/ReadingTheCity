package Android;
use Mojo::Base -base;
use Mojo::JSON 'j';

use Data::Dump 'dump';

has redis => sub { Mojo::Redis2->new };

sub key { join '_', @_ }
sub dekey { split /_/, shift }

sub notification {
  my $self = shift;
  my $json = j($self->redis->get('android_notification')) or do { warn "No notification\n"; return {} };
  no warnings;
  warn sprintf("Notification: %s(%s) => %s (%s|%s|%s): %s\n", $json->{id}, $json->{rssi}, $json->{details}->{name}, $json->{details}->{child}, $json->{details}->{_id}, $json->{details}->{parent}, ($json->{details}->{child}?'':$json->{details}->{url}->[0]));
  $json;
}

sub notify {
  my ($self, $details) = (shift, shift);
#  warn $self->notification->{id};
#warn ref $details ? $details->{id} : $details if $details;
  return unless ref $details;
#warn "NOTIFY\n";
  $self->redis->set(android_notification => j($details));
  return int(rand(10)) == 1 ? 0 : 1;  # Randomly fail on posting to notification bar
}

sub estimotes {
  my $self = shift;
  map { @_ = dekey($_); {major => shift, minor => shift, rssi => $self->redis->hget(beacons => $_)} } @{$self->redis->hkeys('beacons')};
}

sub reset {
  my $self = shift;
  $self->redis->del('android_notification');
  warn dump($_) foreach $self->estimotes;
}

sub _rssi { shift->redis->hset(beacons => key(shift, shift) => shift) }

####################################################################
package RTC;
use Mojo::Base -base;
use Mojo::Redis2;
use Mojo::Log;
use Mojo::UserAgent;	

use DBI;

has log => sub { Mojo::Log->new };
has ua => sub { Mojo::UserAgent->new };
has couchdb => 'http://db.xlxcd1.kit.cm:5984';
has db => sub { DBI->connect("dbi:SQLite:dbname=sql.db","","",{AutoCommit=>1}) };
has redis => sub { Mojo::Redis2->new };

has _beacons => sub { {} };

sub beacon {
  my ($self, %mmr) = @_;
  my $key = join '', map { $mmr{$_} } qw/major minor/ or return;
  if ( $self->_beacons->{$key} ) {
    $self->_beacons->{$key}->rssi($mmr{rssi});
  } else {
    $self->_beacons->{$key} = RTC::Beacon->new(rtc => $self, %mmr);
  }
}
 
sub beacons {
  my $self = shift;
  sort { $a->rssi <=> $b->rssi } grep { !$_->noshow } values %{$self->_beacons};
}
 
sub strong_beacons {
  my @beacons = shift->beacons;
  my @strong = ();
  foreach ( 0..$#beacons ) {
    if ( $beacons[$_]->rssi <= $beacons[0]->rssi + 5 ) {
      push @strong, $beacons[$_];
    } else {
      last;
    }
  }
  @strong;
}

sub reset {
  my $self = shift;
  $self->do("delete from details");
  $self->do("delete from beacons");
  $self->redis->del('notification');
  $self->redis->del('beacons');
}

sub create_tables {
  my $self = shift;
  $self->do("CREATE TABLE IF NOT EXISTS beacons (major integer, minor integer, fetching integer, age integer, parent text);");
  $self->do("CREATE TABLE IF NOT EXISTS details (uuid text, fetching integer, age integer, parent text, json text, show integer);");
}

sub response {
  my ($self, $uuid, $show) = @_;
  $self->do("update details set age=strftime('%s', 'now'),show=? where uuid = ?", undef, $show, $uuid);
}

sub do { shift->db->do(@_) }
sub selectrow_array {
  my $self = shift;
  my ($statement, $attr, @bind_values) = @_;
  my $sth = $self->db->prepare($statement, $attr||{}) or return undef;
  $sth->execute(@bind_values) or return undef;
  my @row = $sth->fetchrow_array;
  my $rows = $sth->rows;
  $sth->finish;
  $rows, @row;
}

package RTC::Beacon;
use Mojo::Base -base;
use Mojo::JSON 'j';

use Data::Dump;

has [qw/rtc major minor rssi/];

sub id { join '', map { $_[0]->$_ } qw/major minor/ }
sub mm { map { $_[0]->$_ } qw/major minor/ }
sub mmr { $_[0]->mm, $_[0]->rssi }
sub dump { Data::Dump::dump({major => $_[0]->major, minor => $_[0]->minor, rssi => $_[0]->rssi}) }
sub dumplog { $_[0]->rtc->log->debug($_[0]->dump); $_[0] }

sub json {
  my ($self, $details) = @_;
  return unless $details;
  $details = {id => $self->id, rssi => $self->rssi, noshow => $self->noshow, details => j($details)};
#  Data::Dump::dump($details);
  $details;
}

has 'noshow';
sub details {
  my ($self, $me, $child) = @_;
  if ( $me ) {
    my ($rows, $_child, $fetching, $age, $parent, $json, $show, $pjson, $pshow) = $self->rtc->selectrow_array("select d0.uuid as cuuid,d1.fetching as fetching,d1.age as age,d1.parent as parent,d1.json as json,d1.show as show,d2.json as pjson,d2.show as pshow from details d1 left join details d2 on d1.parent=d2.uuid left join details d0 on d0.parent=d1.uuid where d1.uuid = ? limit 1", undef, $me);
    $self->rtc->do('insert into details (uuid) values (?)', undef, $me) unless $rows;

    #return if defined $show;
    #return $self->details($parent, $me) if $parent && defined $age && time() - $age < 86400 && not defined $pshow;
    #return $self->json($json) if defined $fetching && time() - $fetching < 7;

    return $self->noshow(1) if (defined $show && !$show) || (defined $pshow && !$pshow);
    return $self->json($json) if defined $fetching && time() - $fetching < 7;
    no warnings;
    warn sprintf "Checking details for %s -> %s | %s %s %s | %s %s %s\n", $self->rssi, $_child, $me, j($json||'{}')->{name}, $show, $parent, j($pjson||'{}')->{name}, $pshow;
    return $self->details($parent, $me) if defined $parent && not defined $pshow;
    if ( (not defined $json) || ($age && time() - $age > 86400) ) {
      warn "Fetching...\n";
      $self->rtc->do("update details set fetching = strftime('%s', 'now') where uuid = ?", undef, $me);
      $self->rtc->ua->get(sprintf('%s/rtc/_design/lookup/_view/details?key="%s"', $self->rtc->couchdb, $me) => sub {
        my ($ua, $tx) = @_;
        my $json = $tx->res->json->{rows}->[0]->{value};
        $json->{child} = $child;
        $self->rtc->do("update details set fetching=null,age=strftime('%s', 'now'),parent=?,json=?,show=null where uuid = ?", undef, $json->{parent}, j($json), $me);
      });
    }
    return $self->json($json);
  } else {
    my ($rows, $fetching, $age, $parent) = $self->rtc->selectrow_array('select fetching,age,parent from beacons where major = ? and minor = ? limit 1', undef, $self->mm);
    $self->rtc->do('insert into beacons (major, minor) values (?, ?)', undef, $self->mm) unless $rows;
    return $self if defined $fetching && time() - $fetching < 7;
    return $self->details($parent, undef) if $parent && defined $age && time() - $age < 86400;
    $self->rtc->do("update beacons set fetching = strftime('%s', 'now') where major = ? and minor = ?", undef, $self->mm);
    $self->rtc->ua->get(sprintf('%s/rtc/_design/lookup/_view/beacon?key=[%s,%s]', $self->rtc->couchdb, $self->mm) => sub {
      my ($ua, $tx) = @_;
      my $json = $tx->res->json->{rows}->[0]->{value};
      $self->rtc->do("update beacons set fetching=null,age=strftime('%s', 'now'),parent=? where major = ? and minor = ?", undef, $json->{parent}, $self->mm);
    });
  }
  undef;
}

####################################################################
package main;
use Mojolicious::Lite;

helper android => sub { Android->new };
helper rtc => sub { RTC->new };

get '/' => 'index';

post '/beacon/:beacon/:rssi' => {rssi => undef} => sub {
  my $c = shift;
  if ( ($c->param('beacon') =~ /^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})-(\d+)-(\d+)$/) ) {
    $c->android->_rssi($2, $3, $c->param('rssi'));
    $c->render(text => '');
  } else {
    $c->render(text => '', status => 401);
  }
};

#post '/show/:uuid/:show' => [show => [(0,1,undef)]] => {show => undef} => sub {
post '/response/:uuid/:show' => {show => undef} => sub {
  my $c = shift;
  $c->rtc->response($c->param('uuid') => $c->param('show'));
  $c->android->reset;
  $c->render(text => $c->param('uuid') . ' => ' . ($c->param('show')?'Yes':'No'));
};

del '/reset' => sub {
  my $c = shift;
  $c->rtc->reset;
  $c->render(text => 'Reset');
};

websocket '/notification' => sub {
  my $c = shift;
  $c->on(frame => sub {
    my ($tx, $frame) = @_;
    Mojo::IOLoop->recurring(1 => sub {
      $tx->send({json => $c->android->notification->{details}});
    });
  });
};

Mojo::IOLoop->recurring(0.25 => sub {
  my $notification = app->android->notification;
  app->rtc->beacon(%$_) foreach app->android->estimotes;
  if ( $notification->{id} && grep { $_->id == $notification->{id} } app->rtc->strong_beacons ) {
    #warn "No change\n";
    return;
  } else {
    foreach ( app->rtc->beacons ) {
      warn sprintf "Looking to post %s\n", $_->rssi;
      if ( app->android->notify($_->details) ) { # Notify using the selected JSON details
        warn "Posted!\n";
        last;
      } else {
        #warn "Not Posted!\n";
      }
    }
  }
});

app->android->reset;
app->rtc->create_tables;
app->start;

__DATA__

@@ notification.html.ep
% if ( $n->{json} ) {
  <a href="<%= $n->{json}->{url}->[0] %>"><%= $n->{json}->{name} %></a>
% }
