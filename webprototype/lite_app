package Beacon;
use Mojo::Base -base;
use Mojo::JSON 'j';
use Data::Dump;

has 'app';

has 'major';
has 'minor';
sub rssi {
  my $self = shift;
  if ( my $rssi = shift ) {
    $self->app->redis->hset(beacons => $self->key => $rssi);
    $self->log;
    $rssi;
  } else {
    $self->app->redis->hget(beacons => $self->key);
  }
}

sub new {
  my $self = shift->SUPER::new(@_);
  $self->major(undef);
  $self->minor(undef);
  $self;
}

sub beacon {
  my $self = shift;
  if ( @_ ) {
    $self->major(shift);
    $self->minor(shift);
    $self->rssi(shift) if $_[0];
    return $self;
  } else {
    return $self->mmr;
  }
}
sub mmr { map { $_ => $_[0]->$_ } qw/major minor rssi/ }
sub id { join '', map { $_[0]->$_ } qw/major minor/ }
sub key { join '_', map { $_[0]->$_ } qw/major minor/ }
sub dump { warn Data::Dump::dump(shift->mmr) }
sub log { $_[0]->app->log->debug(Data::Dump::dump($_[0]->beacon)); $_[0] }

package Android;
use Mojo::Base -base;
use Mojo::JSON 'j';

has 'app';
has beacon => sub { Beacon->new(app => shift->app) };

sub dekey { split /_/, shift }

sub notification {
  my $self = shift;
  my $n = $self->app->redis->get('notification') or do { warn "No notification\n"; return undef; };
  $n = j($n);
  my $beacon = $self->beacon->new->beacon(map { $n->{$_} } qw/major minor/);
  warn sprintf("Notification: %s(%s) => %s (%s|%s|%s): %s\n", $beacon->id, $beacon->rssi, $beacon->json->{name}, $beacon->json->{child}, $beacon->json->{_id}, $beacon->json->{parent}, ($beacon->json->{child}?'':$beacon->json->{url}->[0]));
  $beacon;
}

sub notify {
  my ($self, $json) = (shift, shift);
  $self->app->redis->set(notification => j($json));
  return int(rand(10)) == 1 ? 0 : 1;  # Randomly fail on posting to notification bar
}

sub beacons { @{shift->app->redis->hkeys('beacons')} }
sub estimotes { map { $_[0]->estimote(dekey($_)) } $_[0]->beacons }
sub estimote { shift->beacon->new->beacon(shift, shift, shift) }

sub reset {
  my $self = shift;
  $self->app->redis->del('notification');
  $self->app->redis->del('beacons');
}

package RTC;
use Mojo::Base -base;
use Mojo::Redis2;
use DBI;

has couchdb => 'http://db.xlxcd1.kit.cm:5984';
has db => sub { DBI->connect("dbi:SQLite:dbname=sql.db","","",{AutoCommit=>1}) };
has redis => sub { Mojo::Redis2->new };

has 'app';
has 'beacon';

has json => sub { {} };

sub selectrow_array {
  my $self = shift;
  my ($statement, $attr, @bind_values) = @_;
  my $sth = $self->db->prepare($statement, $attr) or return undef;
  $sth->execute(@bind_values) or return undef;
  my @row = $sth->fetchrow_array;
  my $rows = $sth->rows;
  $sth->finish;
  $rows, @row;
}

sub do { shift->db->do(@_) }

sub new {
  my $self = shift->SUPER::new(@_);
  my $beacon = $self->beacon;
  my ($rows, $fetching, $age, $parent, $pjson, $pshow) = $self->selectrow_array('select b.fetching as fetching,b.age as age,b.parent as parent,d.json as json,d.show as show from beacons b left join details d on b.parent=d.uuid where major = ? and minor = ? limit 1', undef, $beacon->mm);
  $self->do('insert into beacons (major, minor) values (?, ?)', undef, $beacon->mm) unless $rows;
  return undef if defined $pshow && !$pshow;
  return $self if defined $fetching && time() - $fetching < 7;
  if ( (defined $parent && not defined $pjson) || (not defined $age) || time() - $age > 86400 ) {
    $self->do("update beacons set fetching = strftime('%s', 'now') where major = ? and minor = ?", undef, $beacon->mm);
    $self->app->ua->get(sprintf('%s/rtc/_design/lookup/_view/beacon?key=[%s,%s]', $self->couchdb, $beacon->mm) => sub {
      my ($ua, $tx) = @_;
      my $json = $tx->res->json->{rows}->[0]->{value};
      $self->do("update beacons set fetching=null,age=strftime('%s', 'now'),parent=? where major = ? and minor = ?", undef, $json->{parent}, $beacon->mm);
      $self->async_details($json->{parent}, undef);
    });
  }
  $self;
}

sub async_details {
  my ($self, $me, $child) = @_;
  return undef unless $me;
  my ($rows, $_child, $fetching, $age, $parent, $json, $show, $pjson, $pshow) = $self->selectrow_array("select d0.uuid as cuuid,d1.fetching as fetching,d1.age as age,d1.parent as parent,d1.json as json,d1.show as show,d2.json as pjson,d2.show as pshow from details d1 left join details d2 on d1.parent=d2.uuid left join details d0 on d0.parent=d1.uuid where d1.uuid = ? limit 1", undef, $me);
  $self->do('insert into details (uuid) values (?)', undef, $me) unless $rows;
  return undef if (defined $show && !$show) || (defined $pshow && !$pshow);
  return $self->async_details($parent, $me) unless defined $show || defined $pshow;
  return j($json) if defined $fetching && time() - $fetching < 7;
  if ( (defined $parent && not defined $pjson) || (not defined $age) || time() - $age > 86400 ) {
    $self->do("update details set fetching = strftime('%s', 'now') where uuid = ?", undef, $me);
    $self->app->ua->get(sprintf('%s/rtc/_design/lookup/_view/details?key="%s"', $self->couchdb, $me) => sub {
      my ($ua, $tx) = @_;
      my $json = $tx->res->json->{rows}->[0]->{value};
      $json->{child} = $child;
      $self->do("update details set fetching=null,age=strftime('%s', 'now'),parent=?,json=?,show=null where uuid = ?", $json->{parent}, j($json), $me);
      $self->async_details($json->{parent}, $me) if defined $parent && (not defined $show || not defined $pshow);
    });
  }
  j($json);
}

package main;
use Mojolicious::Lite;
use Mojo::Cache;
use Mojo::JSON 'j';
use Mojo::Redis2;
use DBI;
use Data::Dump 'dump';
no warnings;

helper db => sub { DBI->connect("dbi:SQLite:dbname=sql.db","","",{AutoCommit=>1}) };
helper redis => sub { Mojo::Redis2->new };
helper android => sub { Android->new(app => app) };
helper rtc => sub { RTC->new(app => app) };

get '/' => sub {
  my $c = shift;
  $c->render('index');
};

websocket '/notification' => sub {
  my $c = shift;
  $c->on(frame => sub {
    my ($tx, $frame) = @_;
    Mojo::IOLoop->recurring(1 => sub {
      $tx->send({json => $c->details($c->android->notification)});
    });
  });
};

post '/beacon/:beacon/:rssi' => {rssi => undef} => sub {
  my $c = shift;
  if ( ($c->param('beacon') =~ /^([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})-(\d+)-(\d+)$/) ) {
    $c->render(json => {$c->android->estimote($2, $3, $c->param('rssi'))->mmr});
  } else {
    $c->render(text => '', status => 401);
  }
};

#post '/show/:uuid/:show' => [show => [(0,1,undef)]] => {show => undef} => sub {
post '/show/:uuid/:show' => {show => undef} => sub {
  my $c = shift;
  my $sth = $c->app->db->prepare("update details set age=strftime('%s', 'now'),show=? where uuid = ?");
  $sth->execute($c->param('show'), $c->param('uuid'));
  $sth->finish;
  $c->app->redis->del('notification');
  $c->render(text => $c->param('uuid') . ' => ' . ($c->param('show')?'Yes':'No'));
};

del '/reset' => sub {
  my $c = shift;
  $c->app->android->reset;
  $c->db->do("delete from details");
  $c->db->do("delete from beacons");
  $c->render(text => 'Reset');
};

app->db->do("CREATE TABLE IF NOT EXISTS beacons (major integer, minor integer, fetching integer, age integer, parent text);");
app->db->do("CREATE TABLE IF NOT EXISTS details (uuid text, fetching integer, age integer, parent text, json text, show integer);");
app->redis->del('notification');
$_->dump foreach app->android->estimotes;

Mojo::IOLoop->recurring(0.25 => sub {
  my $beacon = app->android->notification;
  my @beacons = sort { $a->rssi <=> $b->rssi } app->android->estimotes;
  if ( defined $beacon && grep { $_->id == $beacon->id } strong_beacons(@beacons) ) {
    #warn "No change\n";
    return
  } else {
    foreach ( @beacons ) {
      if ( app->android->notify(RTC->new(beacon => $_)) ) {
        warn "Posted!\n";
        last;
      } else {
        #warn "Not Posted!\n";
      }
    }
  }
});

app->start;

sub strong_beacons {
  my @beacons = @_;
  my @strong = ();
  foreach ( 0..$#beacons ) {
    if ( $beacons[$_]->rssi <= $beacons[0]->rssi + 5 ) {
      push @strong, $beacons[$_];
    } else {
      last;
    }
  }
  return @strong;
}

__DATA__

@@ notification.html.ep
% if ( $n->{json} ) {
  <a href="<%= $n->{json}->{url}->[0] %>"><%= $n->{json}->{name} %></a>
% }
